--[[
变量在使用前，必须在代码中进行声明，即创建该变量。
编译程序执行代码之前编译器需要知道如何给语句变量开辟存储区，用于存储变量的值。
Lua 变量有三种类型：全局变量、局部变量、表中的域。
Lua 中的变量全是全局变量，那怕是语句块或是函数里，除非用 local 显式声明为局部变量。
局部变量的作用域为从声明位置开始到所在语句块结束。
变量的默认值均为 nil。
]]

a = 5 -- 全局变量
local b = 1 -- 局部变量

function joke()
	c = 5 -- 全局变量
	local d = 6 -- 局部变量
end

joke()
print(c,d) --> 5 nil

do
	local a = 6 -- 局部变量
	b = 6 -- 全局变量
	print(a,b) -- 6 6
end

print(a,b)

print("======================================")

-- 1. 赋值语句
--[[
赋值是改变一个变量的值和改变表域的最基本的方法。
a. Lua可以对多个变量同时赋值，变量列表和值列表的各个元素用逗号分开，赋值语句右边的值会依次赋给左边的变量。
b. 遇到赋值语句Lua会先计算右边所有的值然后再执行赋值操作
应该尽可能的使用局部变量，有两个好处：
1. 避免命名冲突。
2. 访问局部变量的速度比全局变量更快。
]]

a = "hello" .. "world"

a, b = 10, 2*3       -->       a=10; b=2*3

x, y = y, x                     -- swap 'x' for 'y'


print("======================================")


-- 2. 索引
--[[
对 table 的索引使用方括号 []。Lua 也提供了 . 操作。
]]

site = {}
site["key"] = "www.w3cschool.cc"
print(site["key"])
print(site.key)        -- 当索引为字符串类型时的一种简化写法
-- gettable_event(t,i) -- 采用索引访问本质上是一个类似这样的函数调用